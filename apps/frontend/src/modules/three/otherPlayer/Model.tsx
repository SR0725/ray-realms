/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 player.glb --transform --types
*/

import * as THREE from "three";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import model from "./assets/model.glb";
import { Clone } from "@react-three/drei";
import { useGraph } from "@react-three/fiber";
import { Object3D } from "three";
import * as SkeletonUtils from "three/examples/jsm/utils/SkeletonUtils.js";

type GLTFResult = GLTF & {
  nodes: {
    Ch03: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    Ch03_Body: THREE.MeshStandardMaterial;
  };
};

export type ActionName = "idle" | "jump" | "tpose" | "walk" | "waving";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

type Props = JSX.IntrinsicElements["group"] & {
  playAnimation?: ActionName;
};

export function Model(props: Props) {
  const { playAnimation } = props;
  const { scene, animations } = useGLTF(model) as GLTFResult;
  const { materials } = useGLTF(model) as GLTFResult;
  const copiedScene = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(copiedScene) as GLTFResult;
  const { ref, actions, mixer, names } = useAnimations(animations);
  const [lastAction, setLastAction] = useState<ActionName>("idle");
  console.log(actions, names);

  useEffect(() => {
    if (playAnimation && actions[lastAction]) {
      actions[lastAction]?.fadeOut(0.2);
    }
    if (playAnimation && actions[playAnimation]) {
      actions[playAnimation]?.reset();
      actions[playAnimation]?.fadeIn(0.2);
      actions[playAnimation]?.play();
      setLastAction(playAnimation);
    }
  }, [playAnimation, mixer, actions, lastAction]);

  return (
    <group {...props} dispose={null}>
      <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <primitive ref={ref} object={nodes.mixamorigHips} />
        <skinnedMesh
          name="Ch03"
          matrix={nodes.Ch03.matrix}
          geometry={nodes.Ch03.geometry}
          material={materials.Ch03_Body}
          skeleton={nodes.Ch03.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload(model);
